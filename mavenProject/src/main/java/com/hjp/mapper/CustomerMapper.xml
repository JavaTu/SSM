<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hjp.dao.CustomerDao"><!--dsName="" saasAspect=""-->
	<!-- <cache readOnly="true"/> -->
	<!-- 启用Redis缓存时去除下方注释 -->
	<!-- <cache eviction="LRU" type="com.hzecool.tech.mybatis.cache.MybatisRedisCache" readOnly="true" /> -->
    <sql id="allFields">
		id,
		name,
		mobile,
		addr,
		flag
    </sql>
    
	<sql id="insertFields">
		id,
		name,
		mobile,
		addr,
		flag
    </sql>
	
	<insert id="create" parameterType="com.hjp.entity.Customer">
		insert into customer (<include refid="insertFields"/>)
		values (
			#{id},
			#{name},
			#{mobile},
			#{addr},
			#{flag}
		)
	</insert>
	
	<insert id="createInBatch" parameterType="com.hjp.entity.Customer">
		insert into customer (<include refid="insertFields"/>) values 
		<foreach collection="collection" item="item" index="index" separator=",">
			(
				#{item.id},
				#{item.name},
				#{item.mobile},
				#{item.addr},
				#{item.flag}
			)
		</foreach>
	</insert>   		
	
    <sql id="whereClause">
		<if test='name != null and name != ""'>
			and name = #{name}			
		</if>
		<if test='mobile != null and mobile != ""'>
			and mobile = #{mobile}			
		</if>
		<if test='addr != null and addr != ""'>
			and addr = #{addr}			
		</if>
		<if test="flag != null">
			and flag = #{flag}			
		</if>
	</sql>
    
	<select id="get" resultType="com.hjp.entity.Customer" parameterType="Long" >
		select <include refid="allFields"/> 
		  from customer 
		 where id = #{id} 
	</select>
	
	<select id="getByIds" resultType="com.hjp.entity.Customer">
		select <include refid="allFields"/> from customer 
		where id in
		<foreach collection="collection" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>
		
	<select id="getAll" resultType="com.hjp.entity.Customer">
		select <include refid="allFields"/> 
		from customer 
	</select>

	<select id="count" resultType="long">
		select count(*) from customer 
	</select>
	
	<select id="getCountByWhere" parameterType="Map" resultType="Long">
		select count(*) from customer 
		<where>
		    <include refid="whereClause"/>
		</where>
	</select>

	<select id="findByWhere" parameterType="Map" resultType="com.hjp.entity.Customer">
		select <include refid="allFields"/>
		from customer 
		<where>
		    <include refid="whereClause"/>
		</where>				
		<if test="orderBy != null">
			ORDER BY ${orderBy}
			<if test="orderByDesc != null and orderByDesc == 'true'">
				desc
			</if>
		</if>
	</select>
	
	<sql id="setComn">		
		<if test="name != null">
			name = #{name},
		</if>
		<if test="mobile != null">
			mobile = #{mobile},
		</if>
		<if test="addr != null">
			addr = #{addr},
		</if>
		<if test="flag != null">
			flag = #{flag}
		</if>
	</sql>
	
	<update id="update" parameterType="com.hjp.entity.Customer">
		 update customer 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	<update id="updateByMap" parameterType="Map">
		 update customer 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	
	<delete id="delete">
		delete from customer where id = #{id}
	</delete>
	
	<delete id="multiDelete" parameterType="List">
		delete from customer
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<delete id="deleteByWhere" parameterType="Map">
		delete from customer 
		<where>
		    <include refid="whereClause"/>
		</where>
	</delete>	
	
</mapper>    
